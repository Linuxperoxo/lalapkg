#!/bin/bash
#Copyright (c) 2024 per Linuxperoxo.
#Copyright (c) 2024 by C1 Pluralidade de Idéias team
#
#|===============================HEADER===============================|
#| AUTOR                                                              |
#|   	Linuxperoxo                                                   |
#| VERSÂO                                                             |
#|   	1.1                                                           |
#| DESCRIÇÂO                                                          |
#|	Um gerenciador de pacotes simples, focado no minimalismo e na |
#|simplicidade, compatível com praticamente qualquer distribuição que |
#|utilize o bash como shell padrão. No momento, o gerenciador está    |
#|concentrado na compilação de todos os pacotes, porém, pretendo      |
#|adicionar suporte para pacotes pré-compilados.                      |
#|								      |
#| CHANGE LOG							      |
#|	* Função sync adicionada				      |
#|	* Função info adicionada				      |
#|	* Melhorias no código focando na eficiencia		      |
#|	* Função cleardir adicionada                                  |
#|	* Melhoria no menu help					      |
#|	* Suporte ao sync via git ou http(servidor próprio no momen-  |
#|	to não está disponivel para todo o público)		      |
#|====================================================================|

#==============================| VAR
# Tirando suporte ao unicode para melhorar a velocidade do codigo
export LC_ALL=C
export LANG=C

VERSION='1.1 :D'

INPUT='0'

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color


main_repo="/var/lalapkg/repos/main"
sync_dir="/var/lalapkg/repos"
world_dir="/var/lalapkg/world"
script_name="Buildpkg"
downloader_method="wget"

#==============================| LOAD CONFIG
if ! . /etc/lalapkg.conf; then
	echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: lalapkg.conf not found"
	exit 1
fi
#==============================| VERIFIC
[ "$(whoami)" != 'root' ] && { echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Are you root?"; exit 1; }

CHECK_VAR=("$source_dir" "$fakeroot_dir" "$sync" "$custom_repo" "$common_flags" "$jobs")
NAME_VAR=('source_dir' 'fakeroot_dir' 'sync' 'custom_repo' 'common_flags' 'jobs')
index='-1'

for i in "${CHECK_VAR[@]}"; do
	((index++))
	if [ "${NAME_VAR[$index]}" = 'custom_repo' ] || [ "${NAME_VAR[$index]}" = 'common_flags' ] || [ "${NAME_VAR[$index]}" = 'jobs' ] && [ -z "$i" ]; then
		echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: ${GREEN}${NAME_VAR[$index]}${NC} is not set in ${GREEN}lalapkg.conf${NC}"
	elif [ -z "$i" ]; then
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}${NAME_VAR[$index]}${NC} is not set in ${GREEN}lalapkg.conf${NC}"
		exit 1
	fi
done

CHECK_DIR=("$sync_dir" "$source_dir" "$fakeroot_dir" "$world_dir")
NAME_DIR=('sync_dir' 'source_dir' 'fakeroot_dir' 'world_dir')
index='-1'

for p in "${CHECK_DIR[@]}"; do
	((index++))

	[ "${NAME_DIR[$index]}" = 'sync_dir' ] && [ ! -d "${p}" ] && echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: main_repo directory -> ${GREEN}$main_repo${NC} does not exist, use ${GREEN}lalapkg --sync${NC}"

	if [ ! -d "${p}" ]; then
		echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Creating directory ${GREEN}${p}${NC}... "
        	sleep 0.5
        	if ! mkdir -p "$p"; then
        		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Failed to create the directory ${GREEN}$p${NC} :/"
                	exit 1
		fi
	fi
done

CHECK_COMMAND=('wget' 'git')

for k in "${CHECK_COMMAND[@]}"; do
	if [ "$(command -v $k)" = '' ]; then
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}$k${NC} command not found on your system, please install it"
		exit 1
	fi
done

CLEAR_DIR=("$source_dir" "$fakeroot_dir")

for f in "${CLEAR_DIR[@]}"; do
	if [ "$(ls $f | wc -l)" -gt '15' ]; then
		echo
		echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: The directory ${GREEN}$f${NC} has several files that may be useless. ${GREEN}Please check${NC} and use ${GREEN}lalapkg --cleardir${NC} to clean up "
		echo 
	fi
done

#==============================| FUNCTION
CHECK_PKG()
{
	local name="$1"

	[ ! -d "$main_repo" ] && { echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: main_repo directory -> ${GREEN}$main_repo${NC} does not exist, use ${GREEN}lalapkg --sync${NC}"; exit 1 ;}

	if [ -d "$main_repo/$name" ]; then
		localepkg="$main_repo/$name"
		return 0
	fi

	[ -z "$custom_repo" ] && return 1
	[ ! -d "$custom_repo" ] && { echo -e ">>> [${YELLOW}***${NC}] WARNING: ${GREEN}$custom_repo${NC} is not a directory, use ${GREEN}mkdir -p ${custom_repo}${NC}"; return 1 ;} 

	if [ -d "$custom_repo/$name" ]; then
		localepkg="$custom_repo/$name"
		return 0
	fi

	return 1
}

HELP()
{
    echo -e "${GREEN}Usage: $0${NC} ${YELLOW}[option]${NC}"
    echo
    echo -e "${GREEN}Options:${NC}"
    echo -e "  ${GREEN}--emerge${NC} ${RED}<package1> <package2>${NC} ...  ${YELLOW}Install package(s)${NC}"
    echo -e "  ${GREEN}--unmerge${NC} ${RED}<package1> <package2>${NC} ... ${YELLOW}Remove package(s)${NC}"
    echo -e "  ${GREEN}--sync${NC}                              ${YELLOW}Sync with repository${NC}"
    echo -e "  ${GREEN}--info${NC} ${RED}<package>${NC}                    ${YELLOW}Display information about a package${NC}"
    echo -e "  ${GREEN}--cleardir${NC}                          ${YELLOW}Clean up unnecessary files in directories${NC}"
    echo -e "  ${GREEN}--search${NC} ${RED}<package>${NC}                  ${YELLOW}Search for a package${NC}"
}

CLEARDIR()
{
	local DIRS=("$source_dir" "$fakeroot_dir")

	for v in "${DIRS[@]}"; do
		if [ "$v" = '/' ] || [ "$v" = '/*' ]; then
			echo -e ">>> [${RED}***${NC}] ${RED}WARNING${NC}: Surely you don't want to delete the root of the system, check the ${GREEN}DIRS${NC} variable in the ${GREEN}CLEARDIR${NC} function"
			exit 1
		fi

		if rm -rf "$v"/*; then
			echo -e ">>> ${GREEN}Cleaning up${NC} -> $v"
		fi
	done
}

CHECK_SCRIPT()
{
	local dir="$1"

	echo
	echo -e ">>> ${GREEN}CHECKING SYNTAX${NC}: $dir/$script_name"
	echo

	if [ ! -f "$dir/$script_name" ]; then
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: File ${GREEN}$PKG/$script_name${NC} not found :/"
                exit 1
	fi

	. "$dir/$script_name"

	local CHECK_VAR=("$name" "$version" "$extension" "$source_url" "$use_tools")
	local NAME_VAR=('name' 'version' 'extension' 'source_url' 'use_tools')
	local index='-1'

	for f in "${CHECK_VAR[@]}"; do
		((index++))
		if [ -z "$f" ]; then
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}${NAME_VAR[$index]}${NC} var is not set in ${GREEN}$dir/$script_name${NC}"
			exit 1
		fi
		if [ "$NAME_VAR[$index]" = 'use_tools' ] || [ "$use_tools" != 'Y' ] && [ "$use_tools" != 'N' ]; then
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}use_tools${NC} variable can only be ${GREEN}Y${NC}|${RED}N${NC}, adjust this variable in the ${GREEN}$dir/$script_name${NC} file"
			exit 1
		fi
	done

	local CHECK_FUNC=('pre_build' 'build' 'install')

	for o in "${CHECK_FUNC[@]}"; do
		if ! declare -f "$o" >/dev/null; then
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: main function ${GREEN}$o${NC} was not declared in ${GREEN}$dir/$script_name${NC}"
			exit 1
		fi
	done
	return 0
}

SEARCH()
{
	local pkgname="$1"
	local others="$2"

	[ ! -d "$main_repo" ] && { echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: main_repo directory -> ${GREEN}$main_repo${NC} does not exist, use ${GREEN}lalapkg --sync${NC}"; exit 1 ;}
	[ "$others" != '' ] && { echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: You can only search for one name at a time"; exit 1 ;}

	cd "$main_repo"

	found='0'

	for j in *; do
		if echo "$j" | grep -q "$pkgname"; then
			echo -e ">>> ${GREEN}FOUND${NC}: $j"
			((found++))
			continue
		fi
	done
}

INFO()
{
	local PKG="$1"
	echo -e "${GREEN}|=================================PACKAGE-INFO===================================|${NC}"
	echo -e "${GREEN}|NAME${NC}: ${RED}$name${NC}"
	echo -e "${GREEN}|VERSION${NC}: ${RED}$version${NC}"
	echo -e "${GREEN}|USE_TOOLS: ${RED}$use_tools"
	echo -e "${GREEN}|SOURCE_URL: ${RED}$source_url${NC}"
	echo -e "${GREEN}|DESC: ${RED}$desc${NC}"
	echo -e "${GREEN}|================================================================================|${NC}"

}

CREATEPKG()
{

	echo
	echo -e ">>> ${GREEN}STARTING CREATEPKG${NC}: $name-$version"
	echo

	cd "$fakeroot_dir/$name"
	if ! tar cvzf "../$name-$version.lala.tar.gz" .; then
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error creating the package -> ${GREEN}$name-$version${NC}"
		return 1
	fi

	newpkg="$fakeroot_dir/$name-$version.lala.tar.gz"

	return 0
}

SYNC()
{
	local sync="$sync"
	local tmp_sync_dir="/tmp/sync"

	if [ "$sync" != 'git' ] && [ "$sync" != 'http' ]; then
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}repo_sync${NC} variable can only be ${GREEN}git|http${NC}, adjust this variable in the ${GREEN}lala.conf${NC} file"
		exit 1
	fi

	echo
	echo -e ">>> ${GREEN}STARTING SYNC${NC}..."
	echo

	case "$sync" in
		git)
			if [ ! -d "$tmp_sync_dir" ]; then
				mkdir -p "$tmp_sync_dir" &> /dev/null
			fi

			cd "$tmp_sync_dir"

			[ "$(command -v git)" = '' ] && { echo ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}git${NC} was not found on your system. Please install it"; exit 1 ;}

			rm -rf "$tmp_sync_dir"/*

			if ! git clone https://github.com/Linuxperoxo/main-repo.git; then
				echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error in synchronization"
				exit 1
			fi

			rm -rf "$sync_dir"/*

			cd main-repo && mv main "$sync_dir"

			echo
			echo -e ">>> ${GREEN}Successfully synchronized :D${NC}"
			echo 
		;;

		http)
		;;
	esac
}

REMOVEPKG()
{
	local PKG="$1"

	while IFS= read thefile; do
		if [ -f "$thefile" ]; then
			rm "$thefile" 1> /dev/null 2> /dev/null && echo -e ">>> ${GREEN}DELETED${NC}: ${RED}$thefile${NC}"
		elif [ -L "$thefile" ]; then
			unlink "$thefile" 1> /dev/null 2> /dev/null && echo -e ">>> ${GREEN}UNLINK${NC}: ${RED}$thefile${NC}"
		fi
	done < "$PKG"

	while IFS= read thedir; do
		rm -d "$thedir" 1> /dev/null 2> /dev/null && echo ">>> ${GREEN}DELETED DIRECTORY${NC}: ${RED}$thedir${NC}"
	done < "$PKG"

	rm "$PKG"
}

INSTALL()
{
	local PKG="$1"

	echo
	echo -e ">>> ${GREEN}STARTING INSTALLATION${NC}: $PKG"
	echo

	if ! tar xpvf "$PKG" -C / > "${world_dir}/${name}.world"; then
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error installing -> ${GREEN}$name-$version${NC}"
		return 1
	fi

	echo
        echo -e ">>> ${GREEN}STARTING DEEPCLEAN${NC}: $name-$version"
	echo

	if ! sed -i 's,\.\/,/,g; /^$/d' "${world_dir}/${name}.world"; then
		 echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error deepclean -> ${GREEN}$name-$version${NC}"
		return 1
	fi

	if ! rm -rf "$source_dir/$name-$version"; then
		echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}:	${GREEN}$source_dir/$name-$version${NC} was not deleted "
	fi

	if ! rm -rf "$fakeroot_dir/$name"; then
		echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: ${GREEN}$fakeroot_dir/$name${NC} was not deleted "
	fi
	return 0
}

EMERGE()
{
	local PKG="$1"
	export CFLAGS="${common_flags}"
	export CXXFLAGS="${common_flags}"
	export MAKEFLAGS="$jobs"
	export FAKEROOT="$fakeroot_dir"

	cd "$source_dir"
	if [ ! -f "./$name-$version.$extension" ]; then
		echo -e ">>> ${GREEN}STARTING DOWNLOAD${NC}: $source_url"
		if ! $($downloader_method -O $name-$version.$extension $source_url); then
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Unable to complete the download" && rm -rf "$name-$version.$extension"
			exit 1
		fi
		echo -e ">>> [${GREEN}***${NC}] ${GREEN}SUCCESS${NC}: Source downloaded"
		echo 
	fi

	echo -e ">>> ${GREEN}STARTING UNPACK${NC}: $name-$version.$extension"

	if ! tar xpvf "$name-$version.$extension"; then
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Was not possible to unpack using tar" && rm -rf "$name-$version.$extension"
		exit 1
	fi

	local functions=("pre_build" "build" "install" "pos_install")

	for k in "${functions[@]}"; do
		if ! declare -f "$k" >/dev/null; then
			echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Function ${GREEN}$k${NC} is not found in ${GREEN}$PKG/$script_name${NC} file"
			sleep 0.5
			break
		fi
		if "$k"; then
			if [ "$k" = 'build' ]; then
				echo -e ">>> [${GREEN}***${NC}] ${GREEN}SUCCESS${NC}: Compiled successfully -> $name-$version "
	       			sleep 0.2
			elif [ "$k" = 'install' ]; then
				echo -e ">>> [${GREEN}***${NC}] ${GREEN}SUCCESS${NC}: Bin installed successfully in -> $name-$version"
        			sleep 0.2
			fi
		else
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error in ${GREEN}$k${NC} session, verify ${GREEN}$PKG/$script_name${NC}" && rm -rf "$name-$version"
			exit 1
		fi
	done

	rm -rf "$name-$version"

	return 0
}


#==============================| MAIN
[ -z "$1" ] && echo "Version: $VERSION" && echo -e "${RED}>>>${NC} Use -h or --help and have fun!"

case "$1" in
	--emerge)
		shift

		[ -z "$1" ] && echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Specify package name" && exit 1

		if [ -f "$world_dir/$1.world" ]; then
			while true; do
				echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Package ${GREEN}$1${NC} is installed on your system. Do you want to continue anyway? ${GREEN}y${NC}/${RED}N${NC}"
				read INPUT

				case "$INPUT" in
					Y|y)
						break
					;;

					N|n)
						exit 1
					;;

					'')
						exit 1
					;;

					*)
						continue
					;;
				esac
			done
		fi

		while [ -n "$1" ]; do
			if ! CHECK_PKG "$1"; then 
				echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Package ${GREEN}$1${NC} not found"
				shift
			else
				CHECK_SCRIPT "$localepkg" || exit 1
				EMERGE "$localepkg" || exit 1
				if [ "$use_tools" = 'Y' ]; then
					CREATEPKG || exit 1
					INSTALL "$newpkg" || exit 1
				else
					echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: The 'use_tools' variable has been disabled by the script maintainer. This package may become obsolete on the system"
				fi
					shift
				fi
			done
		;;

		--unmerge)

		shift

		[ -z "$1" ] && echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Specify package name" && exit 1

		cd "$world_dir"

		while [ -n "$1" ]; do
			for z in *; do
				[ -z "$1" ] && break
				if echo "$z" | grep -wq "$1"; then
					while true; do
						echo
						echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Do you want to remove the ${RED}$1${NC} package? ${GREEN}Y${NC}/${RED}n${NC}"
						read input

						case "$input" in
							Y|y)
								break
							;;

							N|n)
								exit 0
							;;

							'')
								break
							;;

							*)
								continue
							;;
						esac
					done

					echo
					echo -e ">>> ${GREEN}REMOVING${NC}: $1"
					echo

					sleep 0.4

					REMOVEPKG "$z" || echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error removing package -> $1"
				else
					echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Package ${GREEN}$1${NC} is not installed"
				fi
			shift
			done
		done
		exit 0
	;;

	--sync)
		SYNC
		exit 0
	;;

	--info)
		shift

		if ! CHECK_PKG "$1"; then
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Package ${GREEN}$1${NC} not found"
			exit 1
		fi

		CHECK_SCRIPT "$localepkg"
		INFO "$localepkg"
		exit 0
	;;

	--cleardir)
		CLEARDIR
		exit 0
	;;

	--search)
		shift
		SEARCH "$1" "$2" 
		[ "$found" = '0' ] && echo -e ">>> ${RED}No package found${NC} :(" && exit 1
		exit 0
	;;

	--help|-h)
		HELP
		exit 0
	;;
esac


