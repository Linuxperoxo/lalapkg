#!/bin/bash
#####################################################
#Copyright (c) 2024 per Linuxperoxo.
#Copyright (c) 2024 by C1 Pluralidade de Idéias team
#####################################################
#|===============================HEADER===============================|
#| AUTOR                                                              |
#|   	Linuxperoxo                                                   |
#| VERSÂO                                                             |
#|   	2.3.1                                                         |
#| DESCRIÇÂO                                                          |
#|	Um gerenciador de pacotes simples, focado no minimalismo e na |
#|simplicidade, compatível com praticamente qualquer distribuição que |
#|utilize o bash como shell padrão. No momento, o gerenciador está    |
#|concentrado na compilação de todos os pacotes, porém, pretendo      |
#|adicionar suporte para pacotes pré-compilados.                      |
#|====================================================================|

#|==============================| VAR
# Tirando suporte ao unicode para melhorar a velocidade do codigo
export LC_ALL=C
export LANG=C

# Versão
VERSION='2.3.1 :D'

# Variavel apenas para pegar input do usuario usando o read :^)
INPUT='0'

# Definindo algumas cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color


# Var importantes (ALTERAR ESSAS VAR PODE QUEBRAR COMPLETAMENTE O GERENCIADOR)
main_repo="/var/lalapkg/repos/main"
sync_dir="/var/lalapkg/repos"
world_dir="/var/lalapkg/world"
script_name="Buildpkg"
downloader_method="wget"

#|==============================| LOAD CONFIG
# Carregando arquivo de configuração
if ! . ./lalapkg.conf; then
	echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: lalapkg.conf not found" # Se o arquivo de configuração nao existir vai cair dentro do if
	exit 1
fi
#|==============================| VERIFIC
[ "$(whoami)" != 'root' ] && { echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Are you root?"; exit 1; } # Verifica se o usuario é sudo

# Verificando se as variaveis do arquivo de configuração existem
CHECK_VAR=("$source_dir" "$fakeroot_dir" "$sync" "$root_dir" "$custom_repo" "$common_flags" "$jobs") 
NAME_VAR=('source_dir' 'fakeroot_dir' 'sync' 'root_dir' 'custom_repo' 'common_flags' 'jobs')
index='-1'

for i in "${CHECK_VAR[@]}"; do
	((index++))
	if [ "${NAME_VAR[$index]}" = 'custom_repo' ] || [ "${NAME_VAR[$index]}" = 'common_flags' ] || [ "${NAME_VAR[$index]}" = 'jobs' ] && [ -z "$i" ]; then # Aqui verificamos se as variaveis opts existem
		echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: ${GREEN}${NAME_VAR[$index]}${NC} is not set in ${GREEN}lalapkg.conf${NC}" # Se nao existir apenas vai alertar o usuario
	elif [ -z "$i" ]; then
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}${NAME_VAR[$index]}${NC} is not set in ${GREEN}lalapkg.conf${NC}" # Aqui e a verificação de variaveis criticas
		exit 1
	fi
done

# Verificando se os diretorios existem
CHECK_DIR=("$sync_dir" "$source_dir" "$fakeroot_dir" "${root_dir}${world_dir}")
NAME_DIR=('sync_dir' 'source_dir' 'fakeroot_dir' 'world_dir')
index='-1'

for p in "${CHECK_DIR[@]}"; do
	((index++))

	[ "${NAME_DIR[$index]}" = 'sync_dir' ] && [ ! -d "${p}" ] && echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: main_repo directory -> ${GREEN}$main_repo${NC} does not exist, use ${GREEN}lalapkg --sync${NC}" && sleep 1 # Se o repo main nao existir vai alertar o usuario

	if [ ! -d "${p}" ]; then
		echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Creating directory ${GREEN}${p}${NC}... " 
        sleep 0.5
        if ! mkdir -p "$p"; then # Criação de diretorios 
        	echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Failed to create the directory ${GREEN}$p${NC} :/"
            exit 1
		fi
	fi
done

world_dir="${root_dir}${world_dir}"

# Verificando comandos
CHECK_COMMAND=('wget' 'git')

for k in "${CHECK_COMMAND[@]}"; do
	if [ "$(command -v $k)" = '' ]; then # Verificando se os comandos existem no sistema
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}$k${NC} command not found on your system, please install it"
		exit 1
	fi
done

CLEAR_DIR=("$source_dir" "$fakeroot_dir")

for f in "${CLEAR_DIR[@]}"; do
	if [ "$(ls $f | wc -l)" -gt '15' ]; then # Fazendo uma verificação para ver se o arquivo de source e fakeroot estão muito cheios | o uso de ls nao é recomendado para isso *******
		echo
		echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: The directory ${GREEN}$f${NC} has several files that may be useless. ${GREEN}Please check${NC} and use ${GREEN}lalapkg --cleardir${NC} to clean up "
		echo 
	fi
done


if [ "$root_dir" != '/' ]; then # Verificando se o usuario esta usando o fakeroot
	echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Variable ${GREEN}root_dir${NC} is pointing to ${GREEN}$root_dir${NC}, ${RED}this directory will be interpreted as '/' ${NC}"
	sleep 0.5
fi

#|==============================| FUNCTION
CHECK_PKG()
{
	# Essa função serve para verificar se um pacote existe

	local name="$1"

	# Caso o main repo nao existe ele vai retornar esse erro
	[ ! -d "$main_repo" ] && { echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: main_repo directory -> ${GREEN}$main_repo${NC} does not exist, use ${GREEN}lalapkg --sync${NC}"; exit 1 ;}

	# Verifica primeiro se o pacote existe no main repo
	if [ -d "$main_repo/$name" ]; then
		localepkg="$main_repo/$name"
		return 0
	fi

	# Verificação para ver se está tudo ok com o custom repo
	[ -z "$custom_repo" ] && return 1
	[ ! -d "$custom_repo" ] && { echo -e ">>> [${YELLOW}***${NC}] WARNING: ${GREEN}$custom_repo${NC} is not a directory, use ${GREEN}mkdir -p ${custom_repo}${NC}"; return 1 ;} 

	# Caso nao tenha o main repo ele verifica sem tem no custom repo
	if [ -d "$custom_repo/$name" ]; then
		localepkg="$custom_repo/$name"
		return 0
	fi

	return 1
}

HELP()
{
	# Função que mostra a interface de uso
	echo -e "${GREEN}Usage: $0${NC} ${YELLOW}[option]${NC}"
    	echo
    	echo -e "${GREEN}Options:${NC}"
    	echo -e "  ${GREEN}--emerge${NC} ${RED}<package1> <package2>${NC} ...  ${YELLOW}Install package(s)${NC}"
    	echo -e "  ${GREEN}--unmerge${NC} ${RED}<package1> <package2>${NC} ... ${YELLOW}Remove package(s)${NC}"
    	echo -e "  ${GREEN}--sync${NC}                              ${YELLOW}Sync with repository${NC}"
	echo -e "  ${GREEN}--info${NC} ${RED}<package>${NC}                    ${YELLOW}Display information about a package${NC}"
    	echo -e "  ${GREEN}--cleardir${NC}                          ${YELLOW}Clean up unnecessary files in directories${NC}"
    	echo -e "  ${GREEN}--search${NC} ${RED}<package>${NC}                  ${YELLOW}Search for a package${NC}"
	echo -e "  ${GREEN}--noask${NC} ${YELLOW}Questions will be ignored(s)${NC}"
	echo -e "  	${YELLOW}EXAMPLE${NC}:${GREEN}--emerge --noask${NC} ${RED}<package1> <package2>${NC}"
}

CLEARDIR()
{
	# Função para limpar os diretorio source_dir e fakeroot_dir
	local DIRS=("${source_dir}/*" "${fakeroot_dir}/*")

	for v in "${DIRS[@]}"; do
		if rm -rf "$v"; then
			echo -e ">>> ${GREEN}Cleaning up${NC} -> $v"
		fi
	done
}

CHECK_SCRIPT()
{
	# Função que faz a verificação do script de construção 
	local dir="$1"

	#echo -e "=== ${GREEN}CHECKING SYNTAX${NC}: $dir/$script_name"

	# Primeira verificação é ver se o arquivo existe e se ele é realmente um arquivo 
	if [ ! -f "$dir/$script_name" ]; then
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: File ${GREEN}$PKG/$script_name${NC} not found :/"
        return 1
	fi

	# Se ele existir vamos carregar ele
	. "$dir/$script_name"

	# Segunda verificação e ver se as veriaveis importantes está sendo usadas
	local CHECK_VAR=("$name" "$version" "$extension" "$source_url" "$use_tools")
	local NAME_VAR=('name' 'version'  'extension' 'source_url' 'use_tools')
	local index='-1'

	for f in "${CHECK_VAR[@]}"; do
		((index++))
		if	[ -z "$f" ]; then # Verificando se a variavel está vazia
			if [ "${NAME_VAR[$index]}" = 'extension' ]; then
				echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Variable ${GREEN}extension${NC} is not being used in ${GREEN}$dir/$script_name${NC}, ${RED}TAR WILL NOT BE USED!${NC}"
				TAR='1'
			else
				echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}${NAME_VAR[$index]}${NC} var is not set in ${GREEN}$dir/$script_name${NC}" # Se nao estiver sendo usada vai sair
				return 1
			fi
		fi

		# Verificando se a variavel use_tools é Y ou N 
		if [ "$NAME_VAR[$index]" = 'use_tools' ] || [ "$use_tools" != 'Y' ] && [ "$use_tools" != 'N' ]; then 
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}use_tools${NC} variable can only be ${GREEN}Y${NC}|${RED}N${NC}, adjust this variable in the ${GREEN}$dir/$script_name${NC} file" # Se nao for ele vai reclamar disso e vai sair
			return 1
		fi
	done

	# Verificando se as funções principais estão no arquivo
	local CHECK_FUNC=('pre_build' 'build' 'install' 'pos_install')

	for o in "${CHECK_FUNC[@]}"; do
		if ! declare -f "$o" >/dev/null && [ "$o" = 'pos_install' ]; then
			pos_install='1'
		elif ! declare -f "$o" >/dev/null; then # Testando a função
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: main function ${GREEN}$o${NC} was not declared in ${GREEN}$dir/$script_name${NC}" # Se nao estiver no arquivo vai sair
			return 1
		fi
	done
	return 0
}

SEARCH()
{
	# Função para fazer a pesquisa de pacotes usando uma palavra chave
	local pkgname="$1"
	local others="$2"

	# Verificando se o main repo existe
	[ ! -d "$main_repo" ] && { echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: main_repo directory -> ${GREEN}$main_repo${NC} does not exist, use ${GREEN}lalapkg --sync${NC}"; exit 1 ;}
	[ "$others" != '' ] && { echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: You can only search for one name at a time"; exit 1 ;} # Verificando se o usuario usou mais de 1 palavra chave na pesquisa

	# Entrando no diretorio do main repo
	cd "$main_repo"

	found='0'

	for j in *; do
		[ -z "$pkgname" ] && echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Specify package name" && exit 1 # Verificando se o usuario colocou uma palavra chave
		if echo "$j" | grep -q "$pkgname"; then # Usando o grep como filtro
			echo -e ">>> ${GREEN}FOUND${NC}: Main repo -> $j" # Caso ele encontre um pacote
			((found++))
		fi
	done

	[ ! -d "$custom_repo" ] && { echo -e ">>> [${YELLOW}***${NC}] WARNING: ${GREEN}$custom_repo${NC} is not a directory, use ${GREEN}mkdir -p ${custom_repo}${NC}"; return 1 ;} # Verificando de o custom_repo é um diretorio

	# Entrando no diretorio custom
	cd "$custom_repo"

	for custom in *; do
		if echo "$custom" | grep -q "$pkgname"; then # Usando o grep como filtro
			echo -e	">>> ${GREEN}FOUND${NC}: Custom repo -> $custom" # Caso ele encontre um pacote
                	((found++))
		fi
	done
}

INFO()
{
	# Função para pegar informações do pacote
	local PKG="$1"

	# Usando sed para pegar informações especificas de uma linha
	local author="$(sed -n 's/^# AUTHOR: \(.*\)/\1/p' $PKG/$script_name)"
	local maintainer="$(sed -n 's/^# MAINTAINER: \(.*\)/\1/p' $PKG/$script_name)"
	local dep="$(sed -n 's/^# Depends on: \(.*\)/\1/p' $PKG/$script_name)"
	local opt_dep="$(sed -n 's/^# Optional: \(.*\)/\1/p' $PKG/$script_name)"
	local desc="$(sed -n 's/^# Desc: \(.*\)/\1/p' $PKG/$script_name)"

	echo -e "${GREEN}|=================================PACKAGE-INFO===================================|${NC}"
	echo -e "${GREEN}|AUTHOR${NC}: ${RED}$author${NC}"
	echo -e "${GREEN}|MAINTAINER${NC}: ${RED}$maintainer${NC}"
	echo -e "${GREEN}|================================================================================|"
	echo -e "${GREEN}|NAME${NC}: ${RED}$name${NC}"
	echo -e "${GREEN}|VERSION${NC}: ${RED}$version${NC}"
	echo -e "${GREEN}|DEPENDS ON${NC}: ${RED}$dep${NC}"
	echo -e "${GREEN}|OPTIONAL DEPS${NC}: ${RED}$opt_dep${NC}"
	echo -e "${GREEN}|USE_TOOLS: ${RED}$use_tools"
	echo -e "${GREEN}|SOURCE_URL: ${RED}$source_url${NC}"
	echo -e "${GREEN}|DESC: ${RED}$desc${NC}"
	echo -e "${GREEN}|================================================================================|${NC}"

}

CREATEPKG()
{
	echo -e "=== ${GREEN}STARTING CREATEPKG${NC}: $name-$version"

	cd "$fakeroot_dir/$name" # Indo para o diretorio do software que acabou de ser compilado
	if ! tar cvzf "../$name-$version.lala.tar.gz" .; then # Compactando tudo em um pacote .lala.tar.gz
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error creating the package -> ${GREEN}$name-$version${NC}" # Caso falhe
		return 1
	fi

	if ! rm -rf "$fakeroot_dir/$name" ; then
                echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: ${GREEN}$source_dir/$name-$version${NC} was not deleted "
        fi

	newpkg="$fakeroot_dir/$name-$version.lala.tar.gz" # Localização do pacote criado

	return 0
}

SYNC()
{
	local sync="$sync" # Pegando o tipo de sync que esta com conf do usuario
	local tmp_sync_dir="/tmp/sync" # Diretorio que vai ser baixado o repo 
	local git_link='https://github.com/Linuxperoxo/main-repo.git' # Link do repositorio git
	local http_link='http://192.168.192.46:3060/lalapkg-main_repo.tar.gz' # Link do repositorio http(no momento so disponivel localhost)

	if [ "$sync" != 'git' ] && [ "$sync" != 'http' ]; then # Verificando se a variavel é válida
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: ${GREEN}repo_sync${NC} variable can only be ${GREEN}git|http${NC}, adjust this variable in the ${GREEN}lala.conf${NC} file"
		exit 1
	fi

	echo -e "=== ${GREEN}STARTING SYNC${NC}..."

	case "$sync" in
		git)
			if [ ! -d "$tmp_sync_dir" ]; then # Caso o diretorio temporario do repo nao exista
				mkdir -p "$tmp_sync_dir" &> /dev/null # Criando diretorio
			fi

			if ! cd "$tmp_sync_dir"; then # Indo para dentro do diretorio temporario
				echo -e "[${RED}***${NC}] ${RED}ERROR${NC}: Unable to enter directory ${GREEN}$tmp_sync_dir${NC}" # Caso o cd falhe
                               	exit 1
			fi

			rm -rf "main-repo" # Limpando tudo antes de baixar 

			if ! git clone "$git_link"; then # Caso o download via git falhe
				echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error in synchronization"
				rm -rf main-repo
				exit 1
			fi

			# Por segurança verifico se a variavel não está vazia se nao o rm pode deletar a raiz do sistema caso sync_dir seja null
			[ -z "$sync_dir" ] && {	echo -e	">>> [${RED}***${NC}] ${RED}CRITICAL ERROR${NC}: ${GREEN}sync_dir${NC} ${RED}var is null$! :O Aborting...${NC}"; rm -rf main-repo; exit 1 ;}

			# Removendo o repo atual
			rm -rf "$sync_dir/*"

			# Copiando o repositorio recem baixado para o local certo
			cd main-repo && cp -vr main "$sync_dir"

			echo -e ">>> ${GREEN}Successfully synchronized :D${NC}"
			echo
		;;

		http)
			if [ ! -d "$tmp_sync_dir" ]; then # Caso o diretorio temporario do repo nao exista
				mkdir -p "$tmp_sync_dir" # Criando diretorio
			fi

			if ! cd "$tmp_sync_dir"; then # Indo para dentro do diretorio temporario
				echo -e "[${RED}***${NC}] ${RED}ERROR${NC}: Unable to enter directory ${GREEN}$tmp_sync_dir${NC}" # Caso o cd falhe 
				exit 1
			fi

			rm -rf *tar* # Limpando tudo antes de baixar

			if ! wget "$http_link"; then # Caso o download via http falhe
				echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error in synchronization"
				rm -rf *tar*
                        	exit 1
			fi

			# Por segurança verifico se a variavel não está vazia se nao o rm pode deletar a raiz do sistema caso sync_dir seja null
			[ -z "$sync_dir" ] && { echo -e ">>> [${RED}***${NC}] ${RED}CRITICAL ERROR${NC}: ${GREEN}sync_dir${NC} ${RED}var is null$! :O Aborting...${NC}"; rm -rf *tar*; exit 1 ;}

			# Removendo o repo atual
			rm -rf "$sync_dir/*"

			# Copiando o repositorio recem baixado para o local certo
			tar xpvf lalapkg-main_repo.tar.gz -C "$sync_dir"

        	echo -e ">>> ${GREEN}Successfully synchronized :D${NC}"
            echo
		;;
	esac
}

REMOVEPKG()
{
	local PKG="$1"

	while IFS= read thefile; do # Loop while recebendo uma lista que no caso é um .world
		if [ -f "$root_dir$thefile" ]; then # Se ele é um file
			rm "$root_dir$thefile" 1> /dev/null 2> /dev/null && echo -e ">>> ${YELLOW}DELETED${NC}: ${RED}$thefile${NC}"
		elif [ -L "$root_dir$thefile" ]; then # Se ele é um link
			unlink "$root_dir$thefile" 1> /dev/null 2> /dev/null && echo -e ">>> ${YELLOW}UNLINK${NC}: ${RED}$thefile${NC}"
		fi
	done < "$PKG" # Lista que esta sendo usada

	while IFS= read thedir; do  # Loop while recebendo uma lista que no caso é um .world
		rm -d "$root_dir$thedir" 1> /dev/null 2> /dev/null && echo -e ">>> ${YELLOW}DELETED DIRECTORY${NC}: ${RED}$thedir${NC}" # Deletando por fim os diretorios
	done < "$PKG"

	rm "$PKG" # Removendo o .world
}

INSTALL()
{
	local PKG="$1"

	echo -e "=== ${GREEN}STARTING INSTALLATION${NC}: $PKG"
	echo

	if ! tar xpvf "$PKG" -C $root_dir > "${world_dir}/${name}.world"; then # Descompactando na raiz e jogando a saida para o arquivo .world que vai ser usado para remover os arquivos jogados na raiz
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error installing -> ${GREEN}$name-$version${NC}" 
		return 1
	fi

    echo -e "=== ${GREEN}STARTING DEEPCLEAN${NC}: $name-$version"
	echo

	if ! sed -i 's,\.\/,/,g; /^$/d' "${world_dir}/${name}.world"; then # Usando o sed para melhorar o .world
		 echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error deepclean -> ${GREEN}$name-$version${NC}"
		return 1
	fi

	return 0
}

EMERGE()
{
	local PKG="$1"
	export CFLAGS="${common_flags}"
	export CXXFLAGS="${common_flags}"
	export MAKEFLAGS="$jobs"
	export FAKEROOT="$fakeroot_dir/$name"

	cd "$source_dir"

	[ -d "$name-$version" ] && rm -rf "$name-$version"

	if [ ! -f "./$name-$version.$extension" ]; then
		echo
		echo -e "=== ${GREEN}STARTING DOWNLOAD${NC}: $source_url"
		if ! $($downloader_method -O $name-$version.$extension $source_url); then # Caso o download falhe por algum motivo
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Unable to complete the download" && rm -rf "$name-$version.$extension"
			return 1
		else
			echo -e ">>> [${GREEN}***${NC}] ${GREEN}SUCCESS${NC}: Source downloaded"
			echo
		fi
	fi

	if [ "$TAR" != '1' ]; then # Verificando se o tar vai ser usado nesse pacote
		echo -e "=== ${GREEN}STARTING UNPACK${NC}: $name-$version.$extension"
		echo
		if ! tar xpvf "$name-$version.$extension"; then # Descompactando source tarball
			# Caso o tar falhe o alerta de error vai ser executado e o source tarball será deletado
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Was not possible to unpack using tar" && rm -rf "$name-$version.$extension" #
			return 1
		fi
	else
		echo -e ">>> ${RED}SKIPING UNPACK${NC}: $name-$version"
		echo
	fi

	if [ "$pos_install" = '0' ]; then # Verificando se o script tem a função pos_install
		local functions=('pre_build' 'build' 'install' 'pos_install')
	else
		local functions=('pre_build' 'build' 'install')
		echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Function ${GREEN}pos_install${NC} is not found in ${GREEN}$PKG/$script_name${NC} file"
	fi

	for k in "${functions[@]}"; do
		if "$k"; then # Se a função ocorrer bem vai entrar nesse if
			if [ "$k" = 'build' ]; then # Caso o nome da função que passou sem error for build
				echo -e ">>> [${GREEN}***${NC}] ${GREEN}SUCCESS${NC}: Compiled successfully -> $name-$version "
	       		sleep 0.2
			elif [ "$k" = 'install' ]; then # Caso o nome da função que passou sem error for install
				echo -e ">>> [${GREEN}***${NC}] ${GREEN}SUCCESS${NC}: Bin installed successfully in -> $name-$version" 
        		sleep 0.2
			fi
		else
			# Em casos de erro em alguma função ele cai aqui
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error in ${GREEN}$k${NC} session, verify ${GREEN}$PKG/$script_name${NC}" && rm -rf "$name-$version"
			return 1
		fi
	done

	cd "$source_dir"

	unset TAR # Não dar unset nessa variavel prejudica os outros pacotes que estao na fila

	[ -d "$name-$version" ] && rm -rf "$name-$version" # Verificando se ficou arquivos no sistema do usuario 

	return 0
}

INSTALL_PKG()
{
	local PKG="$1"

	if ! CHECK_PKG "$PKG"; then # Verificando se o script existe e pegando sua localização que fica armazenada em localepkg
		echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Package ${GREEN}$PKG${NC} not found in any repository"
		echo
		pkgfail+=("$PKG") # Se algum pacote nao foi instalado com sucesso
		ERROR='1'
	else
		ERROR='0'
		SomeInst='0'
		COMPILE='1'

		if ! CHECK_SCRIPT "$localepkg"; then # Verificando a syntax do script 
			ERROR='1'
			pkgfail+=("$PKG")
		else
				if [ -f "$fakeroot_dir/$name-$version.lala.tar.gz" ] && [ "$noask" != '1' ]; then # Detectando se um pacote do mesmo software que ja foi compilado antes existe 
					while true; do																# e verificando se o usuario usou --noask
						echo -n -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Precompiled package of ${GREEN}$name${NC} was found. ${YELLOW}Do you want to recompile it?${NC} ${GREEN}Y${NC}/${RED}n${NC} "
						read INPUT
						echo
						case "$INPUT" in
							Y|y|'')
								COMPILE='1'
								break
							;;

							N|n)
								if ! INSTALL "$fakeroot_dir/$name-$version.lala.tar.gz"; then # Caso a função falhe em algum ponto
									ERROR='1'
									pkgfail+=("$PKG")
									COMPILE='0'
								fi
								COMPILE='0'
								break
							;;

							*)
								continue
							;;
						esac
					done
				fi

			if [ "$COMPILE" = '1' ] && [ "$ERROR" = '0' ]; then
				if EMERGE "$localepkg"; then # Caso a função falhe em algum ponto
					if [ "$use_tools" = 'Y' ]; then  # Verificando se o mantenedor do script colocou para usar as ferramentas createpkg e install para salvar os arquivos baixados na world
						CALL_FUNC=("CREATEPKG" "INSTALL") # Funções que seram chamadas
						for callfunc in "${CALL_FUNC[@]}"; do
							if [ "$callfunc" = "INSTALL" ]; then # Verificando se a função é a INSTALL pq ela recebe um parametro
								if ! "$callfunc" "$newpkg"; then # Verificando se ela retorna algo diferente de 0
									ERROR='1'
									pkgfail+=("$1")
									break
								fi
							else
								if ! "$callfunc"; then # Caso a função retorne qualquer coisa diferente de 0
									ERROR='1'
									pkgfail+=("$1")
									break
								fi
							fi
						done
					else
						echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: The 'use_tools' variable has been disabled by the script maintainer. This package may become obsolete on the system" # Caso a variavel use_tools seja N vai executar esse echo
					fi
				else
					ERROR='1'
				fi
			fi
		fi

		case "$ERROR" in
			0)
				return 0
			;;

			1)
				pkgfail+=("$PKG")
				return 1
			;;
		esac
	fi
}

RESOLV_DEPS()
{
	# Função de resolução de dep bem simples
	# Função vai ser melhorada com o tempo
	local DEPS_FILE="$1/DEPS"
	local PKG="$2"
	local DEPS_LIST=()

	echo
	echo -e "=== ${GREEN}Resolving necessary dependencies for${NC}: $2"
	echo

	sleep 0.6

	if [ -f "$DEPS_FILE" ]; then # Verficando se o pacote tem deps
		while IFS= read thedep; do # While recebendo uma lista
			if [ ! -f "$world_dir/$thedep.world" ]; then # Caso a dep nao esteja no sistema vai ser adicionado a lista de deps que precisam ser instaladas
				DEPS_LIST+=("$thedep") # Adicionando dep que precisa ser instalada
			fi
		done < "$DEPS_FILE" # Lista que está sendo entregue ao while
	else
		return 0
	fi

	for dep in "${DEPS_LIST[@]}"; do # Loop for que vai fazer o pacote de baixar todas as deps da lista
		INSTALL_PKG "$dep"
		if [ "$ERROR" = '0' ]; then	 # Se tudo ocorrer bem a dep vai ser marcada como instalada
			instdep+=("$dep Dependency of -> $2") # Jogando a dep que foi instalada com sucesso para array
		fi
	done

	case "$ERROR" in # Verificando a o valor de ERROR
		0)
			return 0
		;;

		1)
			echo -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Package ${GREEN}$2${NC} was not installed because not all dependencies were downloaded successfully" 
			sleep 1 # Caso ocorra algum erro na instalação ou na compilação de alguma dep o pacote principal nao será baixado
			return 1
		;;
	esac
}

INSTALLED_INFO()
{
	if [ -n "${pkginst[0]}" ]; then # Verificando se algum pacote foi instalado
		echo
		echo -e ">>> ${GREEN}INSTALLED PACKAGES${NC}: "
		echo
		for inst in "${pkginst[@]}"; do # Loop para pegar os elementos do array pkginst
			echo -e "${GREEN}*${NC} $inst"
			echo
		done
	fi

	if [ -n "${pkgfail[0]}" ]; then # Verificando se algum pacote falhou
		echo
		echo -e ">>> ${RED}FAIL PACKAGES${NC}:"
		echo
		for fail in "${pkgfail[@]}"; do # Loop para pegar os elementos do array pkgfails
			echo -e " ${RED}*${NC} $fail"
			echo
		done
	fi

	if [ -n "${instdep[0]}" ]; then # Verificando se alguma dep foi baixada
		echo
		echo -e ">>> ${YELLOW}DEPS INSTALLED${NC}: "
		echo
		for deps in "${instdep[@]}"; do # Loop para pegar os elementos do array instdeps
			echo -e " ${YELLOW}*${NC} $deps"
			echo
		done
	fi
}

#|==============================| MAIN
[ -z "$1" ] && echo "Version: $VERSION" && echo -e "${RED}>>>${NC} Use -h or --help and have fun!" && exit 1 # Verificando se o usuario colocou algum argumento na chamado do lalapkg

for args in "$@"; do # Loop para ver se o usuario usou --noask
	if [ "$args" = '--noask' ]; then # esse loop vai ser substituido em breve
		noask='1'
	fi
done

case "$1" in
	--emerge)
		shift # Rebaixando argumentos

		pkginst=() # Declarando array dos pacotes que foram instalados
		pkgfail=() # Declarando array dos pacotes que falharam
		instdep=() # Declarando array das deps instaladas

		[ -z "$1" ] && echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Specify package name" && exit 1 # Verifica se o usuario colocou algum nome de algum pacote

		if [ "$noask" != '1' ]; then
			if [ -f "$world_dir/$1.world" ]; then	# Vendo se o pacote está instalado
				while true; do # Loop principal da case de perguntas
					echo -n -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Package ${GREEN}$1${NC} is installed on your system. ${YELLOW}Do you want to continue anyway?${NC} ${GREEN}y${NC}/${RED}N${NC} "
					read INPUT
					case "$INPUT" in
						Y|y)
							break
						;;

						N|n|'')
							INSTALLED_INFO # Chamando função que mostra uma info geral da instalação de tudo
							exit 0
						;;

						*)
							continue
						;;
					esac
				done
			fi
		fi

		while [ -n "$1" ]; do # While principal
			if [ "$1" != '--noask' ]; then # So uma verificação besta para nao retornar erro de nao achar o pacote
				if ! CHECK_PKG "$1"; then # Verificando se o script existe e pegando sua localização que fica armazenada em localepkg
					echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Package ${GREEN}$1${NC} not found in any repository"
					echo
					pkgfail+=("$1") # Se algum pacote nao foi instalado com sucesso
				else
					if RESOLV_DEPS "$localepkg" "$1"; then # Chamando função de resolver deps
						if INSTALL_PKG "$1"; then # Caso todas as deps sejam baixadas o pacote principal sera instalado
							pkginst+=("$1") # Se tudo ocorrer bem na compilação e instalação o pacote é adicionado a lista de instalações concluidas
						fi
					fi
				fi
			fi
		shift
		done

		INSTALLED_INFO # Depois de nao existir mais nenhum pacote para instalar essa função é chamada
	;;

	--unmerge)
		shift # Rebaixando argumento

		[ -z "$1" ] && echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Specify package name" && exit 1 # Verificando se o usuario especificou algum pacote

		cd "$world_dir" # Indo para o diretorio de world
		archive="$(ls -l | wc -l)" # Pegando quantidade de arquivos no diretorio o uso de ls nao é recomendado para isso mas faz seu papel muito bem nesse caso
		try='1'
		while [ -n "$1" ]; do # Loop while principal do --unmerge para verificar se existe mais algum pacote para remover
				for rv in *; do
					[ "$try" -gt "$archive" ] && echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Package ${GREEN}$1${NC} is not installed" && shift # Verifica se o numeros de tentativas é maior que o numero de arquivo no diretorio se for é declarado que o arquivo nao existe
					[ -z "$1" ] && break # Verifica se tem mais algum pacote pra remover se nao tiver o loop é quebrado
					if echo "$rv" | grep -wq "$1"; then
						RMPKG="$1"
						while true; do # Loop while para pegar um input válido do usuario
							echo -n -e ">>> [${YELLOW}***${NC}] ${YELLOW}WARNING${NC}: Do you want to unmerge the ${RED}$1${NC} package? ${GREEN}Y${NC}/${RED}n${NC} "
							read input

							case "$input" in # Case usando o input do usuario
								Y|y|'')
									echo -e "=== ${GREEN}REMOVING${NC}: $1"

									sleep 0.4 # Timer

									REMOVEPKG "$rv" || echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Error removing package -> $RMPKG" # Chamando função remove se ela retornar algo diferente de 0 o echo sera executado

									try='1' # Se achar o pacote o valor de try passa a ser 1 novamente para fazer a verificação do proximo pacote caso exista

									shift # Rebaixando argumento

									break # Quebrando loop while de pergunta
								;;

								N|n)
									try='1' # Caso o usuario nao deseja remover o pacote ele vai ignorar e continuar executando
									shift # Rebaixa argumento
									break # Quebra loop while de pergunta
								;;

								*)
									continue
								;;
							esac
						done
					else
						((try++)) # Por incrível que pareça essa variavel resolve um bug dessa parte
						# Talvez não seja a melhor maneira de resolver mas está funcionando até o momento
					fi
				done
		done
	;;

	--sync)
		SYNC # Chamando função sync
		exit 0
	;;

	--info)
		shift # Rebaixando argumento

		if ! CHECK_PKG "$1"; then # Chamando a função que verifica a existencia do arquivo
			echo -e ">>> [${RED}***${NC}] ${RED}ERROR${NC}: Package ${GREEN}$1${NC} not found"
			exit 1
		fi

		CHECK_SCRIPT "$localepkg" # Verificando syntax do arquivo
		INFO "$localepkg" # Chamando função que pega as informações
		exit 0
	;;

	--cleardir)
		CLEARDIR # Chama função para limpar os arquivos obsoletos
		exit 0
	;;

	--search)
		shift # Rebaixa um argumento
		SEARCH "$1" "$2"  # Chamando a função search recebendo o primeiro e o segundo argumento passado pelo usuario
		[ "$found" = '0' ] && echo -e ">>> ${RED}No package found${NC} :(" && exit 1 # Caso nao encontre nenhum pacote vai executar esse echo
		exit 0
	;;

	--help|-h)
		HELP # Chama menu de uso
		exit 0
	;;

	--version|-v)
		echo "Version: $VERSION :D"
		exit 0
	;;

	*)
		HELP # Se nenhum argumento passado pelo usuario for valido ele vai cair nesse bloco e chamar o menu de uso
		exit 1
	;;
esac
